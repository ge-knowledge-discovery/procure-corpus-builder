import json
from corpusbuilder.corpus_builder import CorpusBuilder
import spacy
from corpusbuilder.config import Config


def test_extract_PMC7493720():
    nxml_file_path = "tests/corpus-download/PMC7493720/bmm-2020-0309.nxml"
    pmc_id = "PMC7493720"
    license = 'CC BY'
    image_files = ["tests/corpus-download/PMC7493720/figure1.gif", "tests/corpus-download/PMC7493720/figure1.jpg"]
    expected_extract_file_path = "tests/corpus-extract/PMC7493720/PMC7493720.json"
    compare(nxml_file_path, pmc_id, license, image_files, expected_extract_file_path)


def test_extract_PMC7737987():
    nxml_file_path = "tests/corpus-download/PMC7737987/pone.0243606.nxml"
    pmc_id = "PMC7737987"
    license = 'CC BY'
    image_files = ["tests/corpus-download/PMC7737987/pone.0243606.g001.gif", "tests/corpus-download/PMC7737987/pone.0243606.g001.jpg",
                   "tests/corpus-download/PMC7737987/pone.0243606.g002.gif", "tests/corpus-download/PMC7737987/pone.0243606.g002.jpg",
                   "tests/corpus-download/PMC7737987/pone.0243606.g003.gif", "tests/corpus-download/PMC7737987/pone.0243606.g003.jpg",
                   "tests/corpus-download/PMC7737987/pone.0243606.g004.gif", "tests/corpus-download/PMC7737987/pone.0243606.g004.jpg",
                   "tests/corpus-download/PMC7737987/pone.0243606.g005.gif", "tests/corpus-download/PMC7737987/pone.0243606.g005.jpg",
                   "tests/corpus-download/PMC7737987/pone.0243606.g006.gif", "tests/corpus-download/PMC7737987/pone.0243606.g006.jpg",
                   "tests/corpus-download/PMC7737987/pone.0243606.g007.gif", "tests/corpus-download/PMC7737987/pone.0243606.g007.jpg",
                   "tests/corpus-download/PMC7737987/pone.0243606.g008.gif", "tests/corpus-download/PMC7737987/pone.0243606.g008.jpg",
                   "tests/corpus-download/PMC7737987/pone.0243606.g009.gif", "tests/corpus-download/PMC7737987/pone.0243606.g009.jpg",
                   "tests/corpus-download/PMC7737987/pone.0243606.g010.gif", "tests/corpus-download/PMC7737987/pone.0243606.g010.jpg",
                   "tests/corpus-download/PMC7737987/pone.0243606.g011.gif", "tests/corpus-download/PMC7737987/pone.0243606.g011.jpg",
                   "tests/corpus-download/PMC7737987/pone.0243606.g012.gif", "tests/corpus-download/PMC7737987/pone.0243606.g012.jpg",
                   "tests/corpus-download/PMC7737987/pone.0243606.g013.gif", "tests/corpus-download/PMC7737987/pone.0243606.g013.jpg"]
    expected_extract_file_path = "tests/corpus-extract/PMC7737987/PMC7737987.json"
    compare(nxml_file_path, pmc_id, license, image_files, expected_extract_file_path)

def test_extract_PMC7826947():
    nxml_file_path = "tests/corpus-download/PMC7826947/vaccines-09-00030.nxml"
    pmc_id = "PMC7826947"
    license = 'CC BY'
    image_files = ["tests/corpus-download/PMC7826947/vaccines-09-00030-g001.gif","tests/corpus-download/PMC7826947/vaccines-09-00030-g001.jpg"]
    expected_extract_file_path = "tests/corpus-extract/PMC7826947/PMC7826947.json"
    compare(nxml_file_path, pmc_id, license, image_files, expected_extract_file_path)


def compare(nxml_file_path, pmc_id, license, image_files, expected_extract_file_path):
    """ Compare generated vs expected extract json"""

    # extract json generated by code
    config = Config("config.ini")
    nlp = spacy.load(config.spacy_model)
    extract_json = CorpusBuilder.populate_template(nlp, pmc_id, nxml_file_path, license, image_files)

    # expected json
    f = open(expected_extract_file_path, "r")
    extract_json_expected = json.loads(f.read())

    # Removing affiliations from the extract json
    for dic in extract_json['metadata']['provenance']['authors']:
        dic.pop('affiliations')

    # compare generated vs expected
    # Note: here we compare each json component individually, making it easier to pinpoint errors.  (if more json components are added, need to add them here)"""
    assert extract_json["pmc_id"] == extract_json_expected["pmc_id"]
    assert json.dumps(extract_json["metadata"], sort_keys=True) == json.dumps(extract_json_expected["metadata"],
                                                                              sort_keys=True)
    assert json.dumps(extract_json["html_tables"], sort_keys=True) == json.dumps(extract_json_expected["html_tables"],
                                                                                 sort_keys=True)
    assert json.dumps(extract_json["image_tables"], sort_keys=True) == json.dumps(extract_json_expected["image_tables"],
                                                                                  sort_keys=True)
    assert json.dumps(extract_json["figures"], sort_keys=True) == json.dumps(extract_json_expected["figures"],
                                                                             sort_keys=True)
